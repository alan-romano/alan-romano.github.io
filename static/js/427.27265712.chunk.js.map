{"version":3,"file":"static/js/427.27265712.chunk.js","mappings":"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","sources":["components/Tools/WebAssemblyDecoder/WebAssemblyDecoding.tsx"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\r\nimport { okaidia } from \"react-syntax-highlighter/dist/esm/styles/prism\";\r\nimport base64js from \"base64-js\";\r\n\r\ndeclare interface WasmDecoderState {\r\n  inputString: string;\r\n  decodingType: string;\r\n  outputText: string;\r\n  isProcessing: boolean;\r\n  hasError: boolean;\r\n  wabtModule: any | null;\r\n}\r\n\r\ndeclare interface DecodingOptionDetails {\r\n  value: string;\r\n  label: string;\r\n  colorClass: string;\r\n}\r\n\r\nlet __wasmDecoderState: WasmDecoderState = {\r\n  inputString: \"\",\r\n  outputText: \"\",\r\n  decodingType: \"base64\",\r\n  isProcessing: false,\r\n  hasError: false,\r\n  wabtModule: null,\r\n};\r\n\r\nexport default class WebAssemblyDecoderApp extends Component {\r\n  state: WasmDecoderState;\r\n\r\n  constructor(props: {} | Readonly<{}>) {\r\n    super(props);\r\n    this.state = __wasmDecoderState;\r\n\r\n    this.onDecodingInputChange = this.onDecodingInputChange.bind(this);\r\n    this.onEnterPress = this.onEnterPress.bind(this);\r\n    this.onStartDecoding = this.onStartDecoding.bind(this);\r\n    this.onErrorClose = this.onErrorClose.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { wabtModule } = this.state;\r\n    if (wabtModule === null) {\r\n      // wabt().then((wabtMode) => {\r\n      //   this.setState({ wabtModule: wabtMode });\r\n      // });\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    __wasmDecoderState = this.state;\r\n  }\r\n\r\n  onDecodingInputChange(event: React.ChangeEvent<HTMLTextAreaElement>) {\r\n    this.setState({ inputString: event.target.value.trim() });\r\n  }\r\n\r\n  onDecodingTypeChange(decodingType: string) {\r\n    this.setState({ decodingType });\r\n  }\r\n\r\n  onStartDecoding() {\r\n    this.setState({ isProcessing: true });\r\n    const { decodingType } = this.state;\r\n    if (decodingType === \"base64\") {\r\n      this.decodeBase64();\r\n    } else if (decodingType === \"ints-array\") {\r\n      this.decodeIntsArray();\r\n    }\r\n  }\r\n\r\n  onEnterPress(e: React.KeyboardEvent<HTMLTextAreaElement>) {\r\n    if (e.keyCode === 13 && e.shiftKey === false) {\r\n      e.preventDefault();\r\n      this.onStartDecoding();\r\n    }\r\n  }\r\n\r\n  onErrorClose() {\r\n    this.setState({ hasError: false });\r\n  }\r\n\r\n  decodeBase64() {\r\n    const { inputString } = this.state;\r\n    try {\r\n      const decodedBytes = base64js.toByteArray(inputString);\r\n      this.decodeWasmBytes(decodedBytes);\r\n    } catch (err) {\r\n      // eslint-disable-next-line\r\n      console.error(err);\r\n      this.setState({ hasError: true, isProcessing: false });\r\n    }\r\n  }\r\n\r\n  decodeIntsArray() {\r\n    const { inputString } = this.state;\r\n    try {\r\n      const cleanedString = inputString.replace(/^\\[/, \"\").replace(/\\]$/, \"\");\r\n      const decodedBytes = new Uint8Array(\r\n        cleanedString.split(\",\").map((x) => parseInt(x, 10))\r\n      );\r\n      this.decodeWasmBytes(decodedBytes);\r\n    } catch (err) {\r\n      console.error(err);\r\n      this.setState({ hasError: true, isProcessing: false });\r\n    }\r\n  }\r\n\r\n  decodeWasmBytes(decodedBytes: Uint8Array) {\r\n    const { wabtModule } = this.state;\r\n    try {\r\n      const wasmModule = wabtModule;\r\n\r\n      if (wasmModule) {\r\n        const decodedModule = wasmModule.readWasm(decodedBytes, {\r\n          readDebugNames: true,\r\n          exceptions: true,\r\n          mutable_globals: true,\r\n          sat_float_to_int: true,\r\n          sign_extension: true,\r\n          simd: true,\r\n          threads: true,\r\n          multi_value: true,\r\n          tail_call: true,\r\n          bulk_memory: true,\r\n          reference_types: true,\r\n          annotations: true,\r\n          gc: true,\r\n        });\r\n        decodedModule.applyNames();\r\n        const wasmText = decodedModule.toText({\r\n          foldExprs: false,\r\n          inlineExport: false,\r\n        });\r\n\r\n        this.setState({\r\n          outputText: wasmText,\r\n          isProcessing: false,\r\n          hasError: false,\r\n        });\r\n      } else {\r\n        this.setState({ hasError: true, isProcessing: false });\r\n      }\r\n    } catch (err) {\r\n      // eslint-disable-next-line\r\n      console.error(err);\r\n      this.setState({ hasError: true, isProcessing: false });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { inputString, decodingType, outputText, isProcessing, hasError } =\r\n      this.state;\r\n    const decodingOptions: DecodingOptionDetails[] = [\r\n      { value: \"base64\", label: \"Base 64\", colorClass: \"is-dark\" },\r\n      {\r\n        value: \"ints-array\",\r\n        label: \"Array of Integers\",\r\n        colorClass: \"is-dark\",\r\n      },\r\n    ];\r\n\r\n    const syntaxArea =\r\n      outputText === \"\" ? (\r\n        <span>WebAssembly text will be shown here</span>\r\n      ) : (\r\n        <SyntaxHighlighter\r\n          language=\"wasm\"\r\n          style={okaidia}\r\n          showLineNumbers\r\n          customStyle={{ fontSize: \"12px\" }}\r\n        >\r\n          {outputText}\r\n        </SyntaxHighlighter>\r\n      );\r\n    const errorNotification = hasError ? (\r\n      <div className=\"notification is-danger\">\r\n        <button type=\"button\" className=\"delete\" onClick={this.onErrorClose} />\r\n        Sorry, it looks like that input couldn&apos;t be decoded. Try checking\r\n        it to make sure it&apos;s correct. You can check the console for more\r\n        info.\r\n      </div>\r\n    ) : (\r\n      <span />\r\n    );\r\n\r\n    return (\r\n      <div>\r\n        <Helmet>\r\n          <title>Alan Romano | WebAssembly Decoder App</title>\r\n        </Helmet>\r\n        <h1 className=\"title\">WebAssembly Decoder</h1>\r\n        <p>\r\n          This tool can decode WebAssembly modules that have been encoded as\r\n          base64 strings or plain number arrays in JavaScript.\r\n        </p>\r\n        <div className=\"columns\">\r\n          <div className=\"column\">\r\n            <div className=\"buttons has-addons is-centered\">\r\n              {decodingOptions.map((decOpts) => (\r\n                <button\r\n                  type=\"button\"\r\n                  key={`${decOpts.value}-decode-button`}\r\n                  className={`button ${decOpts.colorClass} ${\r\n                    decodingType === decOpts.value ? \"is-active\" : \"\"\r\n                  }`}\r\n                  onClick={this.onDecodingTypeChange.bind(this, decOpts.value)}\r\n                >\r\n                  {decOpts.label}\r\n                </button>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"columns\">\r\n          <div className=\"column\">\r\n            <textarea\r\n              className=\"textarea\"\r\n              value={inputString}\r\n              placeholder=\"Enter encoded WebAssembly module here\"\r\n              onChange={this.onDecodingInputChange}\r\n              onKeyDown={this.onEnterPress}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"columns\">\r\n          <div className=\"column\">\r\n            {errorNotification}\r\n            <div className=\"buttons has-addons is-centered\">\r\n              <button\r\n                type=\"button\"\r\n                className={`button is-primary ${\r\n                  isProcessing ? \"is-loading\" : \"\"\r\n                }`}\r\n                disabled={inputString === \"\" || decodingType === \"\"}\r\n                onClick={this.onStartDecoding}\r\n              >\r\n                Start Decoding\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"columns\">\r\n          <div className=\"column\">{syntaxArea}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"names":["__wasmDecoderState","inputString","outputText","decodingType","isProcessing","hasError","wabtModule","WebAssemblyDecoderApp","Component","constructor","props","super","state","this","onDecodingInputChange","bind","onEnterPress","onStartDecoding","onErrorClose","componentDidMount","componentWillUnmount","event","setState","target","value","trim","onDecodingTypeChange","decodeBase64","decodeIntsArray","e","keyCode","shiftKey","preventDefault","decodedBytes","base64js","decodeWasmBytes","err","console","error","cleanedString","replace","Uint8Array","split","map","x","parseInt","decodedModule","readWasm","readDebugNames","exceptions","mutable_globals","sat_float_to_int","sign_extension","simd","threads","multi_value","tail_call","bulk_memory","reference_types","annotations","gc","applyNames","wasmText","toText","foldExprs","inlineExport","render","syntaxArea","_jsx","children","SyntaxHighlighter","language","style","okaidia","showLineNumbers","customStyle","fontSize","errorNotification","_jsxs","className","type","onClick","Helmet","label","colorClass","decOpts","concat","placeholder","onChange","onKeyDown","disabled"],"sourceRoot":""}