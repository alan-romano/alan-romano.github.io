{"version":3,"sources":["components/Tools/WebAssemblyDecoder/WebAssemblyDecoding.tsx"],"names":["__wasmDecoderState","inputString","outputText","decodingType","isProcessing","hasError","wabtModule","WebAssemblyDecoderApp","props","state","onDecodingInputChange","bind","onEnterPress","onStartDecoding","onErrorClose","this","wabt","then","wabtMode","setState","event","target","value","trim","decodeBase64","decodeIntsArray","e","keyCode","shiftKey","preventDefault","decodedBytes","base64js","toByteArray","decodeWasmBytes","err","console","error","cleanedString","replace","Uint8Array","split","map","x","parseInt","decodedModule","readWasm","readDebugNames","exceptions","mutable_globals","sat_float_to_int","sign_extension","simd","threads","multi_value","tail_call","bulk_memory","reference_types","annotations","gc","applyNames","wasmText","toText","foldExprs","inlineExport","syntaxArea","language","style","okaidia","showLineNumbers","customStyle","fontSize","errorNotification","className","type","onClick","label","colorClass","decOpts","onDecodingTypeChange","placeholder","onChange","onKeyDown","disabled","Component"],"mappings":"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","file":"static/js/15.d660a913.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/control-has-associated-label */\r\n/* eslint-disable react/no-unused-state */\r\n// eslint-disable-next-line no-use-before-define\r\nimport React, { Component } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\r\nimport { okaidia } from \"react-syntax-highlighter/dist/esm/styles/prism\";\r\nimport base64js from \"base64-js\";\r\nimport wabt from \"wabt\";\r\n\r\ndeclare interface WasmDecoderState {\r\n  inputString: string;\r\n  decodingType: string;\r\n  outputText: string;\r\n  isProcessing: boolean;\r\n  hasError: boolean;\r\n  wabtModule: any | null;\r\n}\r\n\r\ndeclare interface DecodingOptionDetails {\r\n  value: string;\r\n  label: string;\r\n  colorClass: string;\r\n}\r\n\r\nlet __wasmDecoderState: WasmDecoderState = {\r\n  inputString: \"\",\r\n  outputText: \"\",\r\n  decodingType: \"base64\",\r\n  isProcessing: false,\r\n  hasError: false,\r\n  wabtModule: null,\r\n};\r\n\r\nexport default class WebAssemblyDecoderApp extends Component {\r\n  state: WasmDecoderState;\r\n\r\n  constructor(props: {} | Readonly<{}>) {\r\n    super(props);\r\n    this.state = __wasmDecoderState;\r\n\r\n    this.onDecodingInputChange = this.onDecodingInputChange.bind(this);\r\n    this.onEnterPress = this.onEnterPress.bind(this);\r\n    this.onStartDecoding = this.onStartDecoding.bind(this);\r\n    this.onErrorClose = this.onErrorClose.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { wabtModule } = this.state;\r\n    if (wabtModule === null) {\r\n      wabt().then((wabtMode) => {\r\n        this.setState({ wabtModule: wabtMode });\r\n      });\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    __wasmDecoderState = this.state;\r\n  }\r\n\r\n  onDecodingInputChange(event: React.ChangeEvent<HTMLTextAreaElement>) {\r\n    this.setState({ inputString: event.target.value.trim() });\r\n  }\r\n\r\n  onDecodingTypeChange(decodingType: string) {\r\n    this.setState({ decodingType });\r\n  }\r\n\r\n  onStartDecoding() {\r\n    this.setState({ isProcessing: true });\r\n    const { decodingType } = this.state;\r\n    if (decodingType === \"base64\") {\r\n      this.decodeBase64();\r\n    } else if (decodingType === \"ints-array\") {\r\n      this.decodeIntsArray();\r\n    }\r\n  }\r\n\r\n  onEnterPress(e: React.KeyboardEvent<HTMLTextAreaElement>) {\r\n    if (e.keyCode === 13 && e.shiftKey === false) {\r\n      e.preventDefault();\r\n      this.onStartDecoding();\r\n    }\r\n  }\r\n\r\n  onErrorClose() {\r\n    this.setState({ hasError: false });\r\n  }\r\n\r\n  decodeBase64() {\r\n    const { inputString } = this.state;\r\n    try {\r\n      const decodedBytes = base64js.toByteArray(inputString);\r\n      this.decodeWasmBytes(decodedBytes);\r\n    } catch (err) {\r\n      // eslint-disable-next-line\r\n      console.error(err);\r\n      this.setState({ hasError: true, isProcessing: false });\r\n    }\r\n  }\r\n\r\n  decodeIntsArray() {\r\n    const { inputString } = this.state;\r\n    try {\r\n      const cleanedString = inputString.replace(/^\\[/, \"\").replace(/\\]$/, \"\");\r\n      const decodedBytes = new Uint8Array(\r\n        cleanedString.split(\",\").map((x) => parseInt(x, 10))\r\n      );\r\n      this.decodeWasmBytes(decodedBytes);\r\n    } catch (err) {\r\n      // eslint-disable-next-line\r\n      console.error(err);\r\n      this.setState({ hasError: true, isProcessing: false });\r\n    }\r\n  }\r\n\r\n  decodeWasmBytes(decodedBytes: Uint8Array) {\r\n    const { wabtModule } = this.state;\r\n    try {\r\n      const wasmModule = wabtModule;\r\n\r\n      if (wasmModule) {\r\n        const decodedModule = wasmModule.readWasm(decodedBytes, {\r\n          readDebugNames: true,\r\n          exceptions: true,\r\n          mutable_globals: true,\r\n          sat_float_to_int: true,\r\n          sign_extension: true,\r\n          simd: true,\r\n          threads: true,\r\n          multi_value: true,\r\n          tail_call: true,\r\n          bulk_memory: true,\r\n          reference_types: true,\r\n          annotations: true,\r\n          gc: true,\r\n        });\r\n        decodedModule.applyNames();\r\n        const wasmText = decodedModule.toText({\r\n          foldExprs: false,\r\n          inlineExport: false,\r\n        });\r\n\r\n        this.setState({\r\n          outputText: wasmText,\r\n          isProcessing: false,\r\n          hasError: false,\r\n        });\r\n      } else {\r\n        this.setState({ hasError: true, isProcessing: false });\r\n      }\r\n    } catch (err) {\r\n      // eslint-disable-next-line\r\n      console.error(err);\r\n      this.setState({ hasError: true, isProcessing: false });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { inputString, decodingType, outputText, isProcessing, hasError } =\r\n      this.state;\r\n    const decodingOptions: DecodingOptionDetails[] = [\r\n      { value: \"base64\", label: \"Base 64\", colorClass: \"is-dark\" },\r\n      {\r\n        value: \"ints-array\",\r\n        label: \"Array of Integers\",\r\n        colorClass: \"is-dark\",\r\n      },\r\n    ];\r\n\r\n    const syntaxArea =\r\n      outputText === \"\" ? (\r\n        <span>WebAssembly text will be shown here</span>\r\n      ) : (\r\n        <SyntaxHighlighter\r\n          language=\"wasm\"\r\n          style={okaidia}\r\n          showLineNumbers\r\n          customStyle={{ fontSize: \"12px\" }}\r\n        >\r\n          {outputText}\r\n        </SyntaxHighlighter>\r\n      );\r\n    const errorNotification = hasError ? (\r\n      <div className=\"notification is-danger\">\r\n        <button type=\"button\" className=\"delete\" onClick={this.onErrorClose} />\r\n        Sorry, it looks like that input couldn&apos;t be decoded. Try checking\r\n        it to make sure it&apos;s correct. You can check the console for more\r\n        info.\r\n      </div>\r\n    ) : (\r\n      <span />\r\n    );\r\n\r\n    return (\r\n      <div>\r\n        <Helmet>\r\n          <title>Alan Romano | WebAssembly Decoder App</title>\r\n        </Helmet>\r\n        <h1 className=\"title\">WebAssembly Decoder</h1>\r\n        <p>\r\n          This tool can decode WebAssembly modules that have been encoded as\r\n          base64 strings or plain number arrays in JavaScript.\r\n        </p>\r\n        <div className=\"columns\">\r\n          <div className=\"column\">\r\n            <div className=\"buttons has-addons is-centered\">\r\n              {decodingOptions.map((decOpts) => (\r\n                <button\r\n                  type=\"button\"\r\n                  key={`${decOpts.value}-decode-button`}\r\n                  className={`button ${decOpts.colorClass} ${\r\n                    decodingType === decOpts.value ? \"is-active\" : \"\"\r\n                  }`}\r\n                  onClick={this.onDecodingTypeChange.bind(this, decOpts.value)}\r\n                >\r\n                  {decOpts.label}\r\n                </button>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"columns\">\r\n          <div className=\"column\">\r\n            <textarea\r\n              className=\"textarea\"\r\n              value={inputString}\r\n              placeholder=\"Enter encoded WebAssembly module here\"\r\n              onChange={this.onDecodingInputChange}\r\n              onKeyDown={this.onEnterPress}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"columns\">\r\n          <div className=\"column\">\r\n            {errorNotification}\r\n            <div className=\"buttons has-addons is-centered\">\r\n              <button\r\n                type=\"button\"\r\n                className={`button is-primary ${\r\n                  isProcessing ? \"is-loading\" : \"\"\r\n                }`}\r\n                disabled={inputString === \"\" || decodingType === \"\"}\r\n                onClick={this.onStartDecoding}\r\n              >\r\n                Start Decoding\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"columns\">\r\n          <div className=\"column\">{syntaxArea}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":""}