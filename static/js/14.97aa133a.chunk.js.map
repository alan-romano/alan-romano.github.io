{"version":3,"sources":["components/Tools/NewLineApp/NewLineApp.tsx"],"names":["__newLineAppState","textToEscape","escapedText","NewLineApp","props","state","onValueChange","bind","this","e","value","target","escapedValue","replace","setState","lineNumbers","match","length","className","onChange","placeholder","readOnly","type","Component"],"mappings":"4NASIA,EAAkC,CACpCC,aAAc,GACdC,YAAa,IAGMC,E,kDAGnB,WAAYC,GAA2B,IAAD,8BACpC,cAAMA,IAHRC,WAEsC,EAEpC,EAAKA,MAAQL,EACb,EAAKM,cAAgB,EAAKA,cAAcC,KAAnB,gBAHe,E,wDAMtC,WACEP,EAAoBQ,KAAKH,Q,2BAG3B,SAAcI,GACZ,IAAQC,EAAUD,EAAEE,OAAZD,MACFE,EAAeF,EAClBG,QAAQ,QAAS,UACjBA,QAAQ,MAAO,OACfA,QAAQ,MAAO,OAClBL,KAAKM,SAAS,CAAEb,aAAcS,EAAOR,YAAaU,M,oBAGpD,WACE,MAAsCJ,KAAKH,MAAnCJ,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,YAChBa,GAAed,EAAae,MAAM,QAAU,IAAIC,OAAS,EAC/D,OACE,gCACE,cAAC,IAAD,UACE,yEAEF,oBAAIC,UAAU,QAAd,+BACA,uBACA,sBAAKA,UAAU,SAAf,UACE,sBAAKA,UAAU,UAAf,UACE,sBAAKA,UAAU,SAAf,UACE,0BACEA,UAAU,WACVR,MAAOT,EACPkB,SAAUX,KAAKF,cACfc,YAAY,yBAEd,0BAEF,sBAAKF,UAAU,cAAf,UACE,+CACA,uBACA,uBACER,MAAOK,EACPM,UAAQ,EACRH,UAAU,iBACVI,KAAK,eAIX,qBAAKJ,UAAU,UAAf,SACE,qBAAKA,UAAU,SAAf,SACE,0BAAUA,UAAU,WAAWR,MAAOR,EAAamB,UAAQ,kB,GAxDjCE","file":"static/js/14.97aa133a.chunk.js","sourcesContent":["// eslint-disable-next-line no-use-before-define\nimport React, { Component } from \"react\";\nimport { Helmet } from \"react-helmet\";\n\ndeclare interface NewLineState {\n  textToEscape: string;\n  escapedText: string;\n}\n\nlet __newLineAppState: NewLineState = {\n  textToEscape: \"\",\n  escapedText: \"\",\n};\n\nexport default class NewLineApp extends Component {\n  state: NewLineState;\n\n  constructor(props: {} | Readonly<{}>) {\n    super(props);\n    this.state = __newLineAppState;\n    this.onValueChange = this.onValueChange.bind(this);\n  }\n\n  componentWillUnmount() {\n    __newLineAppState = this.state;\n  }\n\n  onValueChange(e: { target: { value: any } }) {\n    const { value } = e.target;\n    const escapedValue = value\n      .replace(/\\r\\n/g, \"\\\\r\\\\n\")\n      .replace(/\\r/g, \"\\\\r\")\n      .replace(/\\n/g, \"\\\\n\");\n    this.setState({ textToEscape: value, escapedText: escapedValue });\n  }\n\n  render() {\n    const { textToEscape, escapedText } = this.state;\n    const lineNumbers = (textToEscape.match(/\\n/g) || \"\").length + 1;\n    return (\n      <div>\n        <Helmet>\n          <title>Alan Romano | Newline Escaping App</title>\n        </Helmet>\n        <h1 className=\"title\">Newline Escaping </h1>\n        <br />\n        <div className=\"column\">\n          <div className=\"columns\">\n            <div className=\"column\">\n              <textarea\n                className=\"textarea\"\n                value={textToEscape}\n                onChange={this.onValueChange}\n                placeholder=\"Enter text to escape\"\n              />\n              <br />\n            </div>\n            <div className=\"column is-1\">\n              <span>Line Count:</span>\n              <br />\n              <input\n                value={lineNumbers}\n                readOnly\n                className=\"input is-small\"\n                type=\"text\"\n              />\n            </div>\n          </div>\n          <div className=\"columns\">\n            <div className=\"column\">\n              <textarea className=\"textarea\" value={escapedText} readOnly />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""}