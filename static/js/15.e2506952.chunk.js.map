{"version":3,"sources":["components/Tools/WebAssemblyDecoder/WebAssemblyDecoding.tsx"],"names":["__wasmDecoderState","inputString","outputText","decodingType","isProcessing","hasError","wabtModule","WebAssemblyDecoderApp","props","state","onDecodingInputChange","bind","onEnterPress","onStartDecoding","onErrorClose","this","wabt","then","wabtMode","setState","event","target","value","trim","decodeBase64","decodeIntsArray","e","keyCode","shiftKey","preventDefault","decodedBytes","base64js","toByteArray","decodeWasmBytes","err","console","error","cleanedString","replace","Uint8Array","split","map","x","parseInt","decodedModule","readWasm","readDebugNames","exceptions","mutable_globals","sat_float_to_int","sign_extension","simd","threads","multi_value","tail_call","bulk_memory","reference_types","annotations","gc","applyNames","wasmText","toText","foldExprs","inlineExport","syntaxArea","language","style","okaidia","showLineNumbers","customStyle","fontSize","errorNotification","className","type","onClick","label","colorClass","decOpts","onDecodingTypeChange","placeholder","onChange","onKeyDown","disabled","Component"],"mappings":"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","file":"static/js/15.e2506952.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/control-has-associated-label */\n/* eslint-disable react/no-unused-state */\n// eslint-disable-next-line no-use-before-define\nimport React, { Component } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport { okaidia } from \"react-syntax-highlighter/dist/esm/styles/prism\";\nimport base64js from \"base64-js\";\nimport wabt from \"wabt\";\n\ndeclare interface WasmDecoderState {\n  inputString: string;\n  decodingType: string;\n  outputText: string;\n  isProcessing: boolean;\n  hasError: boolean;\n  wabtModule: any | null;\n}\n\ndeclare interface DecodingOptionDetails {\n  value: string;\n  label: string;\n  colorClass: string;\n}\n\nlet __wasmDecoderState: WasmDecoderState = {\n  inputString: \"\",\n  outputText: \"\",\n  decodingType: \"base64\",\n  isProcessing: false,\n  hasError: false,\n  wabtModule: null,\n};\n\nexport default class WebAssemblyDecoderApp extends Component {\n  state: WasmDecoderState;\n\n  constructor(props: {} | Readonly<{}>) {\n    super(props);\n    this.state = __wasmDecoderState;\n\n    this.onDecodingInputChange = this.onDecodingInputChange.bind(this);\n    this.onEnterPress = this.onEnterPress.bind(this);\n    this.onStartDecoding = this.onStartDecoding.bind(this);\n    this.onErrorClose = this.onErrorClose.bind(this);\n  }\n\n  componentDidMount() {\n    const { wabtModule } = this.state;\n    if (wabtModule === null) {\n      wabt().then((wabtMode) => {\n        this.setState({ wabtModule: wabtMode });\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    __wasmDecoderState = this.state;\n  }\n\n  onDecodingInputChange(event: React.ChangeEvent<HTMLTextAreaElement>) {\n    this.setState({ inputString: event.target.value.trim() });\n  }\n\n  onDecodingTypeChange(decodingType: string) {\n    this.setState({ decodingType });\n  }\n\n  onStartDecoding() {\n    this.setState({ isProcessing: true });\n    const { decodingType } = this.state;\n    if (decodingType === \"base64\") {\n      this.decodeBase64();\n    } else if (decodingType === \"ints-array\") {\n      this.decodeIntsArray();\n    }\n  }\n\n  onEnterPress(e: React.KeyboardEvent<HTMLTextAreaElement>) {\n    if (e.keyCode === 13 && e.shiftKey === false) {\n      e.preventDefault();\n      this.onStartDecoding();\n    }\n  }\n\n  onErrorClose() {\n    this.setState({ hasError: false });\n  }\n\n  decodeBase64() {\n    const { inputString } = this.state;\n    try {\n      const decodedBytes = base64js.toByteArray(inputString);\n      this.decodeWasmBytes(decodedBytes);\n    } catch (err) {\n      // eslint-disable-next-line\n      console.error(err);\n      this.setState({ hasError: true, isProcessing: false });\n    }\n  }\n\n  decodeIntsArray() {\n    const { inputString } = this.state;\n    try {\n      const cleanedString = inputString.replace(/^\\[/, \"\").replace(/\\]$/, \"\");\n      const decodedBytes = new Uint8Array(\n        cleanedString.split(\",\").map((x) => parseInt(x, 10))\n      );\n      this.decodeWasmBytes(decodedBytes);\n    } catch (err) {\n      // eslint-disable-next-line\n      console.error(err);\n      this.setState({ hasError: true, isProcessing: false });\n    }\n  }\n\n  decodeWasmBytes(decodedBytes: Uint8Array) {\n    const { wabtModule } = this.state;\n    try {\n      const wasmModule = wabtModule;\n\n      if (wasmModule) {\n        const decodedModule = wasmModule.readWasm(decodedBytes, {\n          readDebugNames: true,\n          exceptions: true,\n          mutable_globals: true,\n          sat_float_to_int: true,\n          sign_extension: true,\n          simd: true,\n          threads: true,\n          multi_value: true,\n          tail_call: true,\n          bulk_memory: true,\n          reference_types: true,\n          annotations: true,\n          gc: true,\n        });\n        decodedModule.applyNames();\n        const wasmText = decodedModule.toText({\n          foldExprs: false,\n          inlineExport: false,\n        });\n\n        this.setState({\n          outputText: wasmText,\n          isProcessing: false,\n          hasError: false,\n        });\n      } else {\n        this.setState({ hasError: true, isProcessing: false });\n      }\n    } catch (err) {\n      // eslint-disable-next-line\n      console.error(err);\n      this.setState({ hasError: true, isProcessing: false });\n    }\n  }\n\n  render() {\n    const { inputString, decodingType, outputText, isProcessing, hasError } =\n      this.state;\n    const decodingOptions: DecodingOptionDetails[] = [\n      { value: \"base64\", label: \"Base 64\", colorClass: \"is-dark\" },\n      {\n        value: \"ints-array\",\n        label: \"Array of Integers\",\n        colorClass: \"is-dark\",\n      },\n    ];\n\n    const syntaxArea =\n      outputText === \"\" ? (\n        <span>WebAssembly text will be shown here</span>\n      ) : (\n        <SyntaxHighlighter\n          language=\"wasm\"\n          style={okaidia}\n          showLineNumbers\n          customStyle={{ fontSize: \"12px\" }}\n        >\n          {outputText}\n        </SyntaxHighlighter>\n      );\n    const errorNotification = hasError ? (\n      <div className=\"notification is-danger\">\n        <button type=\"button\" className=\"delete\" onClick={this.onErrorClose} />\n        Sorry, it looks like that input couldn&apos;t be decoded. Try checking\n        it to make sure it&apos;s correct. You can check the console for more\n        info.\n      </div>\n    ) : (\n      <span />\n    );\n\n    return (\n      <div>\n        <Helmet>\n          <title>Alan Romano | WebAssembly Decoder App</title>\n        </Helmet>\n        <h1 className=\"title\">WebAssembly Decoder</h1>\n        <p>\n          This tool can decode WebAssembly modules that have been encoded as\n          base64 strings or plain number arrays in JavaScript.\n        </p>\n        <div className=\"columns\">\n          <div className=\"column\">\n            <div className=\"buttons has-addons is-centered\">\n              {decodingOptions.map((decOpts) => (\n                <button\n                  type=\"button\"\n                  key={`${decOpts.value}-decode-button`}\n                  className={`button ${decOpts.colorClass} ${\n                    decodingType === decOpts.value ? \"is-active\" : \"\"\n                  }`}\n                  onClick={this.onDecodingTypeChange.bind(this, decOpts.value)}\n                >\n                  {decOpts.label}\n                </button>\n              ))}\n            </div>\n          </div>\n        </div>\n        <div className=\"columns\">\n          <div className=\"column\">\n            <textarea\n              className=\"textarea\"\n              value={inputString}\n              placeholder=\"Enter encoded WebAssembly module here\"\n              onChange={this.onDecodingInputChange}\n              onKeyDown={this.onEnterPress}\n            />\n          </div>\n        </div>\n\n        <div className=\"columns\">\n          <div className=\"column\">\n            {errorNotification}\n            <div className=\"buttons has-addons is-centered\">\n              <button\n                type=\"button\"\n                className={`button is-primary ${\n                  isProcessing ? \"is-loading\" : \"\"\n                }`}\n                disabled={inputString === \"\" || decodingType === \"\"}\n                onClick={this.onStartDecoding}\n              >\n                Start Decoding\n              </button>\n            </div>\n          </div>\n        </div>\n        <div className=\"columns\">\n          <div className=\"column\">{syntaxArea}</div>\n        </div>\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""}